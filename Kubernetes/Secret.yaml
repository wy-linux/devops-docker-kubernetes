---
# Secret：存储敏感信息（例如密码、OAuth 令牌、SSH 密钥、数据库连接配置等）到etcd中
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: wangyu
# Secret 的类型定义，Opaque 类型用于存储任意键值对数据
# kubernetes.io/service-account-token：服务账户（ServiceAccount）的令牌，Kubernetes 会自动创建和管理这种 Secret
# kubernetes.io/tls：用于存储 TLS 证书和私钥，通常用于 Ingress 或 HTTPS 服务。使用 kubectl create secret tls 命令创建
# kubernetes.io/dockerconfigjson：用于存储拉取私有镜像仓库所需的认证信息（docker login 的凭证）。使用 kubectl create secret docker-registry 命令创建的就是这种类型
type: Opaque
# 数据部分，存储实际的敏感信息（需要 base64 编码）
data:
  # MySQL root 用户密码，使用 base64 编码
  # 注意：base64 编码不是加密，只是编码格式
  # 使用 echo -n "your_password" | base64 命令生成
  root-password: cm9vdF9wYXNzd29yZDEyMw==  # 原始密码: root_password123
  # MySQL 普通用户密码
  user-password: dXNlcl9wYXNzd29yZDQ1Ng==  # 原始密码: user_password456
  # 数据库名称
  database-name: d2FuZ3l1              # 原始值: wangyu
  # MySQL 用户名
  username: d2FuZ3l1                   # 原始值: wangyu

---
# 创建 Secret 后，可以通过两种主要方式被 Pod 使用：1.作为环境变量，将 Secret 中的键值对注入到容器的环境变量中 2.作为卷：将 Secret 键值对作为文件挂载到容器的指定路径下
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql-statefulset
  namespace: wangyu
spec:
  serviceName: mysql-service
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql-container
        image: mysql:8.0
        ports:
        - containerPort: 3306 
        # 环境变量注入方式使用 Secret
        env:
        # 自定义环境变量：root 用户密码
        - name: MYSQL_ROOT_PASSWORD 
          valueFrom:
            secretKeyRef:
              name: mysql-secret # 引用的 Secret 名称
              key: root-password # Secret 中的键名
        # 自定义环境变量：用户名
        - name: MYSQL_USER             
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: username
        # 自定义环境变量：用户密码
        - name: MYSQL_PASSWORD         
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: user-password
        # 自定义环境变量：数据库名
        - name: MYSQL_DATABASE         
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: database-name
        # 文件挂载方式使用 Secret
        volumeMounts:
        - name: mysql-secret-volume    # 引用下面定义的卷名称
          mountPath: "/etc/mysql-secret"  # 挂载到容器内的路径
          readOnly: true  # 设置为只读，增强安全性
      # 卷定义
      volumes:
      - name: mysql-secret-volume  # 卷名称，与上面的 volumeMounts 对应
        secret:
          secretName: mysql-secret  # 使用的 Secret 名称
          # 可选：指定 Secret 中各个键对应的文件名
          items:
          - key: root-password
            path: root_password.txt  # 在挂载目录中创建这个文件
          - key: user-password
            path: user_password.txt
          - key: username
            path: username.txt
          - key: database-name
            path: database_name.txt